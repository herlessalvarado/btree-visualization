{"version":3,"sources":["structures/BPlusTree/Visualizator.ts","structures/BPlusTree/Node.ts","structures/BPlusTree/BPlusTree.ts","structures/BTree/Visualizator.ts","structures/BTree/Node.ts","structures/BTree/BTree.ts","store/index.ts","store/reducers/treeType.ts","store/reducers/dataType.ts","store/reducers/maxDegree.ts","store/reducers/viewTree.ts","store/reducers/treeObject.ts","components/Header.tsx","components/Banner.tsx","components/TreeVisualization.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NodeHierarchy","Object","classCallCheck","this","leaves","children","LeafHierarchy","createClass","key","value","node","push","keys","highlighted","arguments","length","undefined","Node","isLeaf","data","right","pos","splice","BPlusTree","order","root","current","insertNotFull","newRoot","insert_child","split","insert_data","child","parent","newChild","i","pop","_this","hierarchy","pushKey","map","toHierarchy","BTree","Math","ceil","includes","search","reducers","combineReducers","treeType","state","action","type","text","dataType","maxDegree","viewTree","treeObject","parseInt","insert","store","createStore","Header","_React$useState","React","useState","_React$useState2","slicedToArray","bplus","setBplus","useEffect","subscribe","getState","menu","react_default","a","createElement","es_menu","mode","defaultSelectedKeys","id","Item","href","target","row","col","lg","md","sm","xs","onClick","window","location","reload","Step","Option","steps","title","openNotification","notification","open","message","description","Banner","useStore","isStepper","setIsStepper","_React$useState3","_React$useState4","setCurrent","className","item","es_select","showSearch","style","width","onChange","dispatch","es_button","marginTop","check","rc_texty_es","es","textAlign","delay","getD3Tree","btree","tree","d3","size","separation","BTREE","getRoot","TreeVisualization","setRoot","input","setInput","_React$useState5","_React$useState6","alreadyInserted","setAlreadyInserted","settings","keyCellWidth","keyCellHeight","linkStyles","plain","stroke","rectStyles","fill","strokeWidth","nodes","descendants","d","x","concat","y","ii","keyArray","toString","position","digits","svgParams","getSVGParams","transform","links","slice","parentx","parenty","some","arrows","xright","x1","y1","x2","height","es_input","e","Number","isNaN","charCodeAt","ScrollElement_default","playScale","_step2","items","_iterator2","_createForOfIteratorHelper","s","n","done","link","err","f","printLinks","_step","_iterator","arrow","markerWidth","markerHeight","refX","refY","orient","markerUnits","points","y2","markerEnd","printArrows","_step3","_iterator3","_loop","index","dx","dy","textStyle","printNode","App","setViewTree","react_redux_es","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4bc4306.chunk.js","sourcesContent":["export class NodeHierarchy<T> {\n    public leaves : LeafHierarchy<T>;\n    public children : NodeHierarchy<T>[];\n    \n    constructor() {\n        this.leaves = new LeafHierarchy();\n        this.children = [];\n    }\n\n    pushChild(node: NodeHierarchy<T>){\n        this.children.push(node);\n    }\n}\n\nexport class LeafHierarchy<T> {\n    public keys : Object[];\n\n    constructor() {\n        this.keys = [];\n    }\n\n    pushKey(value: T, highlighted=false) {\n        this.keys.push({value, highlighted});\n    }\n}","export class Node<T>{\n    public data: Array<T>;\n    public children: Array<Node<T>>;\n    public right: Node<T> | null;\n    public isLeaf: boolean;\n\n    constructor(isLeaf: boolean){\n        this.data = [];\n        this.children = [];\n        this.right = null;\n        this.isLeaf = isLeaf;\n    }\n\n    public insert_data(value: T) : void { \n        let pos = 0;\n        while (this.data[pos] < value && pos < this.data.length) {\n            pos++;\n        }\n        this.data.splice(pos, 0, value);\n    };\n\n    public insert_child(node: Node<T>, pos: number) : void {\n        this.children.splice(pos, 0, node);\n    }\n}","import { LeafHierarchy, NodeHierarchy } from './Visualizator';\nimport { Node } from './Node';\n\nexport class BPlusTree<T>{\n    private root: Node<T>;\n    private order: number;\n\n    constructor(order: number){\n        this.order = order;\n        this.root = new Node<T>(true);\n    }\n\n    public insert(value: T) : void {\n        let current = this.root;\n        this.insertNotFull(current,value);\n        if(current.data.length === this.order) {\n            const newRoot = new Node<T>(false);\n            this.root = newRoot;\n            newRoot.insert_child(current, 0);\n            this.split(current, newRoot, 1);\n        }\n    }\n\n    private insertNotFull(node: Node<T>, value: T) : void {\n        if(!node.isLeaf){\n            let pos = node.data.length;\n            while(pos > 0 && node.data[pos-1] > value){\n                pos--;\n            }\n            this.insertNotFull(node.children[pos], value);\n            if (node.children[pos].data.length === this.order) {\n                this.split(node.children[pos], node, pos + 1);\n            }\n        }else{\n            node.insert_data(value);\n        }\n    }\n\n    private split(child: Node<T>, parent: Node<T>, pos: number) : void {\n        let newChild = new Node<T>(child.isLeaf);\n        for(let i = 0 ; i < this.order/2 ; i++){\n            newChild.insert_data(child.data.pop()!);\n        }\n        if(!child.isLeaf){\n            for (let i = 0 ; i < this.order/2 ; i++) {\n                newChild.insert_child(child.children.splice(this.order/2 + 1, 1)[0], i);\n            }\n        }\n        parent.insert_child(newChild, pos);\n        parent.insert_data(newChild.data[0]);\n        if(!newChild.isLeaf) newChild.data.splice(0,1);\n        parent.isLeaf = false;\n        if(child.isLeaf) child.right = newChild;\n    }\n\n    public getRoot() : Node<T>{\n        return this.root;\n    }\n\n    public toHierarchy(node: Node<T>) {\n        const hierarchy = new NodeHierarchy<T>();\n        hierarchy.leaves = new LeafHierarchy<T>();\n        for(let i=0; i<node.data.length; i++){\n            hierarchy.leaves.pushKey(node.data[i]);\n        }\n        hierarchy.children = node.children.map((node) => this.toHierarchy(node));\n        return hierarchy;\n    }\n}","export class NodeHierarchy<T> {\n    public leaves : LeafHierarchy<T>;\n    public children : NodeHierarchy<T>[];\n    \n    constructor() {\n        this.leaves = new LeafHierarchy();\n        this.children = [];\n    }\n\n    pushChild(node: NodeHierarchy<T>){\n        this.children.push(node);\n    }\n}\n\nexport class LeafHierarchy<T> {\n    public keys : Object[];\n\n    constructor() {\n        this.keys = [];\n    }\n\n    pushKey(value: T, highlighted=false) {\n        this.keys.push({value, highlighted});\n    }\n}","export class Node<T>{\n    public data: Array<T>;\n    public children: Array<Node<T>>;\n    public isLeaf: boolean;\n\n    constructor(isLeaf: boolean){\n        this.data = [];\n        this.children = [];\n        this.isLeaf = isLeaf;\n    }\n\n    public insert_data(value: T) : void { \n        let pos = 0;\n        while (this.data[pos] < value && pos < this.data.length) {\n            pos++;\n        }\n        this.data.splice(pos, 0, value);\n    };\n\n    public insert_child(node: Node<T>, pos: number) : void {\n        this.children.splice(pos, 0, node);\n    }\n}","import { LeafHierarchy, NodeHierarchy } from './Visualizator';\nimport { Node } from './Node';\n\nexport class BTree<T>{\n    private root: Node<T>;\n    private order: number;\n\n    constructor(order: number){\n        this.order = order;\n        this.root = new Node<T>(true);\n    }\n\n    public insert(value: T) : void {\n        let current = this.root;\n        this.insertNotFull(current,value);\n        if(current.data.length === this.order) {\n            const newRoot = new Node<T>(false);\n            this.root = newRoot;\n            newRoot.insert_child(current, 0);\n            this.split(current, newRoot, 1);\n        }\n    }\n\n    private insertNotFull(node: Node<T>, value: T) : void {\n        if(!node.isLeaf){\n            let pos = node.data.length;\n            while(pos > 0 && node.data[pos-1] > value){\n                pos--;\n            }\n            this.insertNotFull(node.children[pos], value);\n            if (node.children[pos].data.length === this.order) {\n                this.split(node.children[pos], node, pos + 1);\n            }\n        }else{\n            node.insert_data(value);\n        }\n    }\n\n    private split(child: Node<T>, parent: Node<T>, pos: number) : void {\n        let newChild = new Node<T>(child.isLeaf);\n        for(let i = 0; i < (this.order - 1) / 2 ; i++){\n            newChild.insert_data(child.data.pop()!);\n        }\n        if(!child.isLeaf){\n            for (let i = 0; i < Math.ceil((this.order - 1) / 2) + 1; i++) {\n                newChild.insert_child(child.children.splice((this.order - 1) / 2 + 1, 1)[0], i);\n            }\n        }\n        parent.insert_child(newChild, pos);\n        parent.insert_data(child.data.pop()!);\n        parent.isLeaf = false;\n    }\n\n    public getRoot() : Node<T>{\n        return this.root;\n    }\n\n    public search(node : Node<T>,value : T) : boolean {\n        if(node.data.includes(value)){\n            return true;\n        }else if(node.isLeaf){\n            return false;\n        }\n        let i = 0;\n        while(i <= node.data.length && node.data[i] < value){\n            i++;\n        }\n        return this.search(node.children[i], value);\n    }\n\n    public toHierarchy(node: Node<T>) {\n        const hierarchy = new NodeHierarchy<T>();\n        hierarchy.leaves = new LeafHierarchy<T>();\n        for(let i=0; i<node.data.length; i++){\n            hierarchy.leaves.pushKey(node.data[i]);\n        }\n        hierarchy.children = node.children.map((node) => this.toHierarchy(node));\n        return hierarchy;\n    }\n}","import { createStore, combineReducers} from 'redux';\nimport treeTypeReducer from './reducers/treeType';\nimport dataTypeReducer from './reducers/dataType';\nimport maxDegreeReducer from './reducers/maxDegree';\nimport viewTreeReducer from './reducers/viewTree';\nimport treeObjectReducer from './reducers/treeObject';\n\nconst reducers = combineReducers({\n    treeType: treeTypeReducer,\n    dataType: dataTypeReducer,\n    maxDegree: maxDegreeReducer,\n    viewTree: viewTreeReducer,\n    treeObject: treeObjectReducer,\n});\n\nconst store = createStore(reducers);\n\nexport default store;","export default function treeType(state = '', action: any) {\n    switch (action.type) {\n      case 'SET_TREE_TYPE':\n        return action.text\n      default:\n        return state\n    }\n  }","export default function dataType(state = '', action: any) {\n    switch (action.type) {\n      case 'SET_DATA_TYPE':\n        return action.text\n      default:\n        return state\n    }\n  }","export default function maxDegree(state = '', action: any) {\n    switch (action.type) {\n      case 'SET_MAX_DEGREE':\n        return action.text\n      default:\n        return state\n    }\n  }","export default function viewTree(state = false, action: any) {\n    switch (action.type) {\n      case 'SET_VIEW_TREE':\n        return action.text\n      default:\n        return state\n    }\n  }","import { BPlusTree } from '../../structures/BPlusTree/BPlusTree';\nimport { BTree } from '../../structures/BTree/BTree';\n\ntype alias = BTree<number | string> | BPlusTree<number | string> | null\n\nexport default function treeObject(state: alias = null, action: any) {\n    switch (action.type) {\n        case 'CREATE_BTREE_OBJECT':\n            if(action.dataType === 'number'){\n                return new BTree<number>(parseInt(action.maxDegree));\n            }\n            if(action.dataType === 'string'){\n                return new BTree<string>(parseInt(action.maxDegree));\n            }\n        case 'CREATE_BPLUSTREE_OBJECT':\n            if(action.dataType === 'number'){\n                return new BPlusTree<number>(parseInt(action.maxDegree));\n            }\n            if(action.dataType === 'string'){\n                return new BPlusTree<string>(parseInt(action.maxDegree));\n            }\n        case 'INSERT_TREE':\n            state!.insert(action.value);\n            return state;\n        default:\n            return state\n    }\n  }","import React, { useEffect } from 'react';\nimport { Menu, Row, Col } from 'antd';\nimport store from '../store';\n\nexport default function Header() {\n\n  const [bplus, setBplus ] = React.useState(false);\n\n  useEffect(() => {\n    store.subscribe(() => {\n        store.getState().treeType === 'btree' ? setBplus(false) : setBplus(true)\n    })\n  }, [bplus])\n\n    const menu = [\n      <Menu mode=\"horizontal\" defaultSelectedKeys={['github']} id=\"nav\" key=\"nav\">\n        <Menu.Item key=\"github\">\n          <a href=\"https://github.com/herlessalvarado/btree-visualization\" target=\"_blank\">\n            Github\n          </a>\n        </Menu.Item>\n      </Menu>,\n    ];\n\n    return (\n      <header id=\"header\">\n        <Row>\n          <Col lg={4} md={5} sm={24} xs={24}>\n            <a id=\"logo\" onClick={() => window.location.reload(false)}>\n            {bplus === false ? <span>BTree Visualizer</span> : <span>B+Tree Visualizer</span>}\n            </a>\n          </Col>\n          <Col lg={20} md={19} sm={0} xs={0}>\n            {menu}\n          </Col>\n        </Row>\n      </header>\n    );\n  }\n","import React from 'react';\nimport { Select, Button, Steps, notification } from 'antd';\nimport QueueAnim from 'rc-queue-anim';\nimport { useStore } from 'react-redux';\nimport Texty from 'rc-texty';\nimport 'rc-texty/assets/index.css';\n\nconst { Step } = Steps;\nconst { Option } = Select;\n\nconst steps = [\n  {\n    title: 'Btree',\n  },\n  {\n    title: 'Data type',\n  },\n  {\n    title: 'Max degree',\n  },\n];\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification',\n    description:\n      'Please select a option',\n  });\n};\n\nexport default function Banner() {\n\n    let store = useStore();\n\n    const [isStepper,  setIsStepper] = React.useState(false);\n    const [current, setCurrent] = React.useState(0);\n\n    function handleContinue(){\n      setIsStepper(true);\n    }\n\n    function handleTreeType (value : any) {\n        store.dispatch({\n            type: 'SET_TREE_TYPE',\n            text: value,\n        });\n    }\n\n    function nextTreeType() {\n      let check = store.getState();\n      if(check.treeType !== ''){\n        setCurrent(current+1);\n      }else{\n        openNotification()\n      }\n    }\n\n    function handleDataType (value : any) {\n        store.dispatch({\n            type: 'SET_DATA_TYPE',\n            text: value,\n        });\n    }\n    function nextDataType() {\n      let check = store.getState();\n      if(check.dataType !== ''){\n        setCurrent(current+1);\n      }else{\n        openNotification()\n      }\n    }\n\n    function handleMaxDegree (value : any) {\n        store.dispatch({\n            type: 'SET_MAX_DEGREE',\n            text: value,\n        });\n    }\n\n    function nextMaxDegree() {\n      let check = store.getState();\n      if(check.maxDegree !== ''){\n        if(check.treeType === 'btree'){\n          store.dispatch({\n            type: 'CREATE_BTREE_OBJECT',\n            dataType: check.dataType,\n            maxDegree: check.maxDegree,\n          });\n        }\n        if(check.treeType === 'bplustree'){\n          store.dispatch({\n            type: 'CREATE_BPLUSTREE_OBJECT',\n            dataType: check.dataType,\n            maxDegree: check.maxDegree,\n          });\n        }\n        store.dispatch({\n          type: 'SET_VIEW_TREE',\n          text: true,\n        });\n      }else{\n        openNotification()\n      }\n    }\n\n  return (\n    <section className=\"page banner-wrapper\">\n      <div className=\"banner-text-wrapper\">\n        {\n          isStepper ?\n          <div className=\"card-wrapper\">\n            <Steps current={current}>\n              {steps.map(item => (\n                <Step key={item.title} title={item.title} />\n              ))}\n            </Steps>\n            {current === 0 ?\n            <div className=\"steps-content\">\n              <h2>CHOOSE YOUR BTREE</h2>\n              <Select\n                  key=\"2\"\n                  showSearch\n                  style={{ width: 300 }}\n                  onChange={handleTreeType}\n              >\n                  <Option value=\"btree\">B Tree</Option>\n                  <Option value=\"bplustree\">B+ Tree</Option>\n              </Select>\n              <Button style={{marginTop: '20px'}} onClick={nextTreeType}>Next</Button>\n            </div> : null}\n            {current === 1 ?\n            <div className=\"steps-content\">\n              <h2 key=\"3\">CHOOSE YOUR DATA TYPE</h2>\n              <Select\n                  key=\"4\"\n                  showSearch\n                  style={{ width: 300 }}\n                  onChange={handleDataType}\n              >\n                  <Option value=\"number\">Number</Option>\n                  <Option value=\"string\">String</Option>\n              </Select>\n              <Button style={{marginTop: '20px'}} onClick={nextDataType}>Next</Button>\n            </div> : null}\n            {current === 2 ?\n            <div className=\"steps-content\">\n              <h2 key=\"5\">CHOOSE YOUR MAX DEGREE</h2>\n              <Select\n                  key=\"6\"\n                  showSearch\n                  style={{ width: 300 }}\n                  onChange={handleMaxDegree}\n              >\n                  <Option value=\"3\">3</Option>\n                  <Option value=\"4\">4</Option>\n                  <Option value=\"5\">5</Option>\n              </Select>\n              <Button style={{marginTop: '20px'}} onClick={nextMaxDegree}>Create tree</Button>\n            </div> : null}\n          </div>\n          :\n          <div>\n            <Texty className=\"welcome-text\">Welcome</Texty>\n            <QueueAnim style={{textAlign: 'center'}} delay={1000}>\n              <Button key=\"continue\" onClick={handleContinue}>Continue</Button>\n            </QueueAnim>\n          </div>\n        }\n      </div>\n    </section>\n  );\n}\n","import React from 'react';\nimport * as d3 from 'd3';\nimport ScrollElement from 'rc-scroll-anim/lib/ScrollElement';\nimport QueueAnim from 'rc-queue-anim';\nimport { Input, Button, notification } from 'antd';\nimport { BPlusTree } from '../structures/BPlusTree/BPlusTree';\nimport { useStore } from 'react-redux';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification',\n    description:\n      'The element is already inserted',\n  });\n};\n\nfunction getD3Tree (btree: any) {\n  const tree = d3.tree().size([1000, 50 - 200]).separation(() => (38 * 2));\n  let BTREE = btree.toHierarchy(btree.getRoot());\n  return tree(d3.hierarchy(BTREE));\n}\n\nexport default function TreeVisualization() {\n\n  let store = useStore();\n\n  const [root, setRoot] = React.useState<any>(getD3Tree(store.getState().treeObject));\n\n  const [input, setInput] = React.useState<any>();\n\n  const [alreadyInserted, setAlreadyInserted] = React.useState<any>([]);\n  \n  const settings = {\n    keyCellWidth: 38,\n    keyCellHeight: 28,\n    linkStyles: {\n      plain: {\n        stroke: '#654321',\n      },\n      highlighted: {\n        stroke: 'red',\n      },\n    },\n    rectStyles: {\n      plain: {\n        fill: 'white',\n        stroke: '#143b29',\n        strokeWidth: 5,\n      },\n      highlighted: {\n        fill: 'lightblue',\n        stroke: 'red',\n        strokeWidth: 2,\n      },\n    },\n  };\n\n  function nodes() {\n    if (root) {\n      const nodes = getNodes(root.descendants());\n      return nodes;\n    }\n  };\n\n  function links() {\n    if (root) {\n      const links = getLinks(root.descendants());\n      return links;\n    }\n  };\n\n  function arrows() {\n    if(root) {\n      const arrows = getArrows(root.leaves());\n      return arrows;\n    }\n  }\n\n  function getSVGParams(key: any, position: any, keys: any) {\n    return {\n      width: settings.keyCellWidth + (key.value.toString().length - 1) * 3,\n      height: settings.keyCellHeight,\n      x: position * (settings.keyCellWidth + (key.value.toString().length - 1) * 3)\n              - ((settings.keyCellWidth + (key.value.toString().length - 1) * 3) / 2) * (keys ? keys.length : 2),\n      y: -settings.keyCellHeight / 2,\n      style: key.highlighted ? settings.rectStyles.highlighted : settings.rectStyles.plain,\n    };\n  };\n\n  function getKeys(keys: any) {\n    return keys.map((key: any, ii: any, keyArray: any) => (\n      {\n        text: key.value.toString(),\n        position: ii,\n        digits: key.value.toString().length,\n        highlighted: key.highlighted,\n        svgParams: getSVGParams(key, ii, keyArray),\n      }\n    )) || null;\n  };\n\n  function getNodes(descendants: any) {\n    return descendants.map((d: any, i: any) => {\n      const x = `${0 + d.x}px`;\n      const y = `${20 - d.y}px`;\n      return {\n        id: i,\n        keys: getKeys(d.data.leaves.keys),\n        style: {\n          transform: `translate(${x},${y})`,\n        },\n      };\n    });\n  };\n  \n  function getLinks(descendants: any) {\n    return descendants.slice(1).map((d: any, i: any) => {\n      const x = d.x + 0;\n      const parentx = 0 + d.parent.x;\n      const y = 20 - d.y;\n      const parenty = 20 - d.parent.y;\n      const highlighted = d.data.leaves.keys.some((key: any) => key.highlighted) && d.parent.data.leaves.keys.some((key: any) => key.highlighted);\n      return {\n        id: i,\n        d: `M${x},${y}L${parentx},${parenty}`,\n        style: highlighted ? settings.linkStyles.highlighted : settings.linkStyles.plain,\n      };\n    });\n  };\n\n  function getArrows(leaves: any) {\n    return leaves.map((d: any, i: any, a: any) => {\n      const x = d.x;\n      const y = 20 - d.y;\n      let xright = 0;\n      if(a[i+1]){\n        xright = a[i+1].x - (settings.keyCellWidth*4);\n      }\n      return {\n        id: i,\n        x1: `${x}`,\n        y1: `${y}`,\n        x2: `${xright}`,\n        style: settings.linkStyles.plain,\n      };\n    })\n  }\n\n  function printArrows() {\n    const items = [];\n    for(const arrow of arrows()) {\n      items.push(\n        <g key={arrow.id}>\n          <defs>\n            <marker id=\"arrowhead\" markerWidth=\"15\" markerHeight=\"15\" refX=\"0\" refY=\"3.5\" orient=\"auto\" markerUnits=\"strokeWidth\">\n              <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#654321\" />\n            </marker>\n          </defs>\n          <line strokeWidth=\"5\" x1={arrow.x1} y1={arrow.y1} y2={arrow.y1} x2={arrow.x2} stroke=\"#654321\" \n  markerEnd=\"url(#arrowhead)\" />\n        </g>\n      )\n    }\n    items.pop();\n    return items;\n  }\n\n  function printLinks(){\n    const items = [];\n\n    for (const link of links()) {\n      items.push(<path className=\"link\" strokeWidth=\"5\" key={link.id} d={link.d} style={link.style}></path>)\n    }\n    return items\n  }\n\n  function printNode(){\n    const items = [];\n\n    for (const node of nodes()) {\n      items.push(<g className=\"node\" key={node.id}>\n        {node.keys.map((key: any, index: any) => {\n          return(\n            <g key={key.text}\n              style={node.style}>\n                <rect width={key.svgParams.width}\n                height={key.svgParams.height}\n                x={key.svgParams.x}\n                y={key.svgParams.y}\n                style={key.svgParams.style}></rect>\n              <text\n                dx={key.position * settings.keyCellWidth -\n                  (settings.keyCellWidth/2) * (node.keys.length) + 10 - (key.digits - 2)*4}\n                dy={4}\n                style={node.textStyle}\n              >\n                { key.text }\n              </text>\n            </g>\n          )\n        }\n      )}\n      </g>)\n    }\n    return items\n  }\n\n  const handleInput = (e: any) => {\n    let current;\n    if(store.getState().dataType === 'number'){\n      current = parseInt(e.target.value || 0, 10);\n      if (Number.isNaN(current)) {\n        return;\n      }\n      if(current > 99) {\n        return;\n      }\n    }else{\n      if((e.target.value.charCodeAt(0) >= 97 && e.target.value.charCodeAt(0) <= 122)){\n        if(e.target.value[e.target.value.length-1].charCodeAt(0) >= 97 && e.target.value[e.target.value.length-1].charCodeAt(0) <= 122){\n          setInput(e.target.value[e.target.value.length-1]);\n          return;\n        }else{\n          if(Number.isNaN(e.target.value[e.target.value.length-1])){\n            current = e.target.value;\n          }else{\n            return;\n          }\n        }\n      }else{\n        return;\n      }\n    }\n    setInput(current);\n  }\n\n  const insertTree = () => {\n    if(alreadyInserted.includes(input)){\n      openNotification();\n      return;\n    }\n    alreadyInserted.push(input);\n    setAlreadyInserted(alreadyInserted);\n    store.dispatch({\n      type: 'INSERT_TREE',\n      value: input,\n    });\n    setRoot(getD3Tree(store.getState().treeObject));\n  }\n  \n  return (\n    <section className=\"page banner-wrapper\">\n        <div className=\"insert-container\">\n          <Input\n            type=\"text\"\n            value={input}\n            onChange={handleInput}\n            style={{ width: 100 }}\n          />\n          <Button onClick={insertTree}>Insert</Button>\n        </div>\n        <ScrollElement\n      className=\"page\"\n      id=\"banner\"\n      playScale={0.9}\n    >\n      <QueueAnim className=\"banner-text-wrapper\" type=\"left\" delay={1000} key=\"banner\">\n      <svg\n          className=\"svg\"\n          style={{\n            width: `1000px`,\n            height: `600px`\n          }}\n        >\n          {printLinks()}\n          { store.getState().treeObject instanceof BPlusTree ? printArrows() : null}\n          {printNode()}\n      </svg>\n      </QueueAnim>\n      </ScrollElement>\n    </section>\n  );\n}\n","import React, { useEffect } from 'react';\nimport './assets/header.less';\nimport './assets/banner.less';\nimport './assets/tree.less';\nimport Header from './components/Header';\nimport Banner from './components/Banner';\nimport TreeVisualization from './components/TreeVisualization';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nexport default function App() {\n\n    const [viewTree, setViewTree ] = React.useState(false);\n\n    useEffect(() => {\n        store.subscribe(() => {\n            store.getState().viewTree === false ? setViewTree(false) : setViewTree(true)\n        })\n    }, [viewTree])\n\n    return (\n        <Provider store={store}>\n            <Header></Header>\n            {viewTree === false ? <Banner></Banner> : <TreeVisualization></TreeVisualization>}\n        </Provider>\n    )\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}