{"version":3,"sources":["components/Header.tsx","components/Banner.tsx","structures/BPlusTree/Visualizator.ts","structures/BPlusTree/Node.ts","structures/BPlusTree/BPlusTree.ts","components/TreeVisualization.tsx","structures/BTree/Visualizator.ts","structures/BTree/Node.ts","structures/BTree/BTree.ts","store/index.ts","store/reducers/treeType.ts","store/reducers/dataType.ts","store/reducers/maxDegree.ts","store/reducers/viewTree.ts","store/reducers/treeObject.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","menu","react_default","a","createElement","es_menu","mode","defaultSelectedKeys","id","key","Item","href","target","row","col","lg","md","sm","xs","openNotification","notification","open","message","description","Banner","store","useStore","Option","es_select","className","ScrollElement_default","playScale","es","type","ease","delay","showSearch","style","width","onChange","value","dispatch","text","es_button","onClick","check","getState","treeType","dataType","maxDegree","icon","NodeHierarchy","Object","classCallCheck","this","leaves","children","LeafHierarchy","createClass","node","push","keys","highlighted","arguments","length","undefined","Node","isLeaf","data","right","pos","splice","BPlusTree","order","root","current","insertNotFull","newRoot","insert_child","split","insert_data","child","parent","newChild","i","pop","_this","hierarchy","pushKey","map","toHierarchy","getD3Tree","btree","tree","d3","size","separation","BTREE","getRoot","TreeVisualization","_React$useState","React","useState","treeObject","_React$useState2","slicedToArray","setRoot","_React$useState3","_React$useState4","input","setInput","_React$useState5","_React$useState6","alreadyInserted","setAlreadyInserted","settings","keyCellWidth","keyCellHeight","linkStyles","plain","stroke","rectStyles","fill","strokeWidth","nodes","descendants","d","x","concat","y","ii","keyArray","toString","position","digits","svgParams","getSVGParams","transform","links","slice","parentx","parenty","some","arrows","xright","x1","y1","x2","height","es_input","e","parseInt","Number","isNaN","charCodeAt","includes","_step2","items","_iterator2","_createForOfIteratorHelper","s","n","done","link","err","f","printLinks","_step","_iterator","arrow","markerWidth","markerHeight","refX","refY","orient","points","y2","markerEnd","printArrows","_step3","_iterator3","_loop","index","dx","dy","textStyle","printNode","BTree","Math","ceil","reducers","combineReducers","state","action","viewTree","insert","createStore","App","setViewTree","useEffect","subscribe","react_redux_es","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAGe,SAASA,IAEpB,IAAMC,EAAO,CACXC,EAAAC,EAAAC,cAAAC,EAAA,GAAMC,KAAK,aAAaC,oBAAqB,CAAC,UAAWC,GAAG,MAAMC,IAAI,OACpEP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CAAWD,IAAI,UACbP,EAAAC,EAAAC,cAAA,KAAGO,KAAK,yDAAyDC,OAAO,UAAxE,aAON,OACEV,EAAAC,EAAAC,cAAA,UAAQI,GAAG,UACTN,EAAAC,EAAAC,cAAAS,EAAA,OACEX,EAAAC,EAAAC,cAAAU,EAAA,GAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC7BhB,EAAAC,EAAAC,cAAA,KAAGI,GAAG,QACJN,EAAAC,EAAAC,cAAA,kCAGJF,EAAAC,EAAAC,cAAAU,EAAA,GAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC7BjB,2GClBPkB,EAAmB,WACvBC,EAAA,EAAaC,KAAK,CAChBC,QAAS,eACTC,YACE,kCAIS,SAASC,IAEpB,IAAIC,EAAQC,cAEJC,EAJqBC,EAAA,EAIrBD,OAiDV,OACEzB,EAAAC,EAAAC,cAAA,WAASyB,UAAU,uBACjB3B,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CACE0B,UAAU,OACVrB,GAAG,SACHuB,UAAW,IAEX7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAWH,UAAU,sBAAsBI,KAAM,CAAC,QAAS,QACzDC,KAAM,CAAC,eAAgB,kBAAmBC,MAAO,IAAK1B,IAAI,UACxDP,EAAAC,EAAAC,cAAA,MAAIK,IAAI,KAAR,eAAwBP,EAAAC,EAAAC,cAAA,mBACxBF,EAAAC,EAAAC,cAAAwB,EAAA,GACInB,IAAI,IACJ2B,YAAU,EACVC,MAAO,CAAEC,MAAO,KAChBC,SA7DZ,SAAyBC,GACrBf,EAAMgB,SAAS,CACXR,KAAM,gBACNS,KAAMF,MA4DFtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,SAAd,UACAtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,aAAd,YAEJtC,EAAAC,EAAAC,cAAA,MAAIK,IAAI,KAAR,eAAwBP,EAAAC,EAAAC,cAAA,uBACxBF,EAAAC,EAAAC,cAAAwB,EAAA,GACInB,IAAI,IACJ2B,YAAU,EACVC,MAAO,CAAEC,MAAO,KAChBC,SAhEZ,SAAyBC,GACrBf,EAAMgB,SAAS,CACXR,KAAM,gBACNS,KAAMF,MA+DFtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,UAAd,UACAtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,UAAd,WAEJtC,EAAAC,EAAAC,cAAA,MAAIK,IAAI,KAAR,eAAwBP,EAAAC,EAAAC,cAAA,wBACxBF,EAAAC,EAAAC,cAAAwB,EAAA,GACInB,IAAI,IACJ2B,YAAU,EACVC,MAAO,CAAEC,MAAO,KAChBC,SAnEZ,SAA0BC,GACtBf,EAAMgB,SAAS,CACXR,KAAM,iBACNS,KAAMF,MAkEFtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,KAAd,KACAtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,KAAd,KACAtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,KAAd,KACAtC,EAAAC,EAAAC,cAACuB,EAAD,CAAQa,MAAM,KAAd,MAEJtC,EAAAC,EAAAC,cAAA,MAAIK,IAAI,KAAR,iBACAP,EAAAC,EAAAC,cAAAuC,EAAA,GAAQlC,IAAI,IAAIoB,UAAU,wBAAwBI,KAAK,UAAUW,QApEzE,WACE,IAAIC,EAAQpB,EAAMqB,WACI,KAAnBD,EAAME,UAAsC,KAAnBF,EAAMG,UAAuC,KAApBH,EAAMI,WACnC,UAAnBJ,EAAME,UACPtB,EAAMgB,SAAS,CACbR,KAAM,sBACNe,SAAUH,EAAMG,SAChBC,UAAWJ,EAAMI,YAGC,cAAnBJ,EAAME,UACPtB,EAAMgB,SAAS,CACbR,KAAM,0BACNe,SAAUH,EAAMG,SAChBC,UAAWJ,EAAMI,YAGrBxB,EAAMgB,SAAS,CACbR,KAAM,gBACNS,MAAM,KAGRvB,MA8CI,OAEJjB,EAAAC,EAAAC,cAAA8C,EAAA,GAAMjB,KAAK,OAAOJ,UAAU,uDC/GvBsB,EAAb,WAII,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAHRC,YAGO,EAAAD,KAFPE,cAEO,EACVF,KAAKC,OAAS,IAAIE,EAClBH,KAAKE,SAAW,GANxB,OAAAJ,OAAAM,EAAA,EAAAN,CAAAD,EAAA,EAAA1C,IAAA,YAAA+B,MAAA,SAScmB,GACNL,KAAKE,SAASI,KAAKD,OAV3BR,EAAA,GAcaM,EAAb,WAGI,SAAAA,IAAeL,OAAAC,EAAA,EAAAD,CAAAE,KAAAG,GAAAH,KAFRO,UAEO,EACVP,KAAKO,KAAO,GAJpB,OAAAT,OAAAM,EAAA,EAAAN,CAAAK,EAAA,EAAAhD,IAAA,UAAA+B,MAAA,SAOYA,GAA6B,IAAnBsB,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACjCT,KAAKO,KAAKD,KAAK,CAACpB,QAAOsB,oBAR/BL,EAAA,GCdaS,EAAb,WAMI,SAAAA,EAAYC,GAAiBf,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,GAAAZ,KALtBc,UAKqB,EAAAd,KAJrBE,cAIqB,EAAAF,KAHrBe,WAGqB,EAAAf,KAFrBa,YAEqB,EACxBb,KAAKc,KAAO,GACZd,KAAKE,SAAW,GAChBF,KAAKe,MAAQ,KACbf,KAAKa,OAASA,EAVtB,OAAAf,OAAAM,EAAA,EAAAN,CAAAc,EAAA,EAAAzD,IAAA,cAAA+B,MAAA,SAauBA,GAEf,IADA,IAAI8B,EAAM,EACHhB,KAAKc,KAAKE,GAAO9B,GAAS8B,EAAMhB,KAAKc,KAAKJ,QAC7CM,IAEJhB,KAAKc,KAAKG,OAAOD,EAAK,EAAG9B,KAlBjC,CAAA/B,IAAA,eAAA+B,MAAA,SAqBwBmB,EAAeW,GAC/BhB,KAAKE,SAASe,OAAOD,EAAK,EAAGX,OAtBrCO,EAAA,GCGaM,EAAb,WAII,SAAAA,EAAYC,GAAerB,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,GAAAlB,KAHnBoB,UAGkB,EAAApB,KAFlBmB,WAEkB,EACtBnB,KAAKmB,MAAQA,EACbnB,KAAKoB,KAAO,IAAIR,GAAQ,GANhC,OAAAd,OAAAM,EAAA,EAAAN,CAAAoB,EAAA,EAAA/D,IAAA,SAAA+B,MAAA,SASkBA,GACV,IAAImC,EAAUrB,KAAKoB,KAEnB,GADApB,KAAKsB,cAAcD,EAAQnC,GACxBmC,EAAQP,KAAKJ,SAAWV,KAAKmB,MAAO,CACnC,IAAMI,EAAU,IAAIX,GAAQ,GAC5BZ,KAAKoB,KAAOG,EACZA,EAAQC,aAAaH,EAAS,GAC9BrB,KAAKyB,MAAMJ,EAASE,EAAS,MAhBzC,CAAApE,IAAA,gBAAA+B,MAAA,SAoB0BmB,EAAenB,GACjC,GAAImB,EAAKQ,OAULR,EAAKqB,YAAYxC,OAVL,CAEZ,IADA,IAAI8B,EAAMX,EAAKS,KAAKJ,OACdM,EAAM,GAAKX,EAAKS,KAAKE,EAAI,GAAK9B,GAChC8B,IAEJhB,KAAKsB,cAAcjB,EAAKH,SAASc,GAAM9B,GACnCmB,EAAKH,SAASc,GAAKF,KAAKJ,SAAWV,KAAKmB,OACxCnB,KAAKyB,MAAMpB,EAAKH,SAASc,GAAMX,EAAMW,EAAM,MA5B3D,CAAA7D,IAAA,QAAA+B,MAAA,SAmCkByC,EAAgBC,EAAiBZ,GAE3C,IADA,IAAIa,EAAW,IAAIjB,EAAQe,EAAMd,QACzBiB,EAAI,EAAIA,EAAI9B,KAAKmB,MAAM,EAAIW,IAC/BD,EAASH,YAAYC,EAAMb,KAAKiB,OAEpC,IAAIJ,EAAMd,OACN,IAAK,IAAIiB,EAAI,EAAIA,EAAI9B,KAAKmB,MAAM,EAAIW,IAChCD,EAASL,aAAaG,EAAMzB,SAASe,OAAOjB,KAAKmB,MAAM,EAAI,EAAG,GAAG,GAAIW,GAG7EF,EAAOJ,aAAaK,EAAUb,GAC9BY,EAAOF,YAAYG,EAASf,KAAK,IAC7Be,EAAShB,QAAQgB,EAASf,KAAKG,OAAO,EAAE,GAC5CW,EAAOf,QAAS,EACbc,EAAMd,SAAQc,EAAMZ,MAAQc,KAjDvC,CAAA1E,IAAA,UAAA+B,MAAA,WAqDQ,OAAOc,KAAKoB,OArDpB,CAAAjE,IAAA,cAAA+B,MAAA,SAwDuBmB,GAAe,IAAA2B,EAAAhC,KACxBiC,EAAY,IAAIpC,EACtBoC,EAAUhC,OAAS,IAAIE,EACvB,IAAI,IAAI2B,EAAE,EAAGA,EAAEzB,EAAKS,KAAKJ,OAAQoB,IAC7BG,EAAUhC,OAAOiC,QAAQ7B,EAAKS,KAAKgB,IAGvC,OADAG,EAAU/B,SAAWG,EAAKH,SAASiC,IAAI,SAAC9B,GAAD,OAAU2B,EAAKI,YAAY/B,KAC3D4B,MA/Dff,EAAA,uhCCKA,IAAMrD,EAAmB,WACvBC,EAAA,EAAaC,KAAK,CAChBC,QAAS,eACTC,YACE,qCAIN,SAASoE,EAAWC,GAClB,IAAMC,EAAOC,MAAUC,KAAK,CAAC,KAAM,MAAWC,WAAW,kBAAO,KAC5DC,EAAQL,EAAMF,YAAYE,EAAMM,WACpC,OAAOL,EAAKC,IAAaG,IAGZ,SAASE,IAEtB,IAAI1E,EAAQC,cAF8B0E,EAIlBC,IAAMC,SAAcX,EAAUlE,EAAMqB,WAAWyD,aAJ7BC,EAAApD,OAAAqD,EAAA,EAAArD,CAAAgD,EAAA,GAInC1B,EAJmC8B,EAAA,GAI7BE,EAJ6BF,EAAA,GAAAG,EAMhBN,IAAMC,WANUM,EAAAxD,OAAAqD,EAAA,EAAArD,CAAAuD,EAAA,GAMnCE,EANmCD,EAAA,GAM5BE,EAN4BF,EAAA,GAAAG,EAQIV,IAAMC,SAAc,IARxBU,EAAA5D,OAAAqD,EAAA,EAAArD,CAAA2D,EAAA,GAQnCE,EARmCD,EAAA,GAQlBE,EARkBF,EAAA,GAUpCG,EAAW,CACfC,aAAc,GACdC,cAAe,GACfC,WAAY,CACVC,MAAO,CACLC,OAAQ,SAEV1D,YAAa,CACX0D,OAAQ,QAGZC,WAAY,CACVF,MAAO,CACLG,KAAM,QACNF,OAAQ,QACRG,YAAa,GAEf7D,YAAa,CACX4D,KAAM,YACNF,OAAQ,MACRG,YAAa,KAKnB,SAASC,IACP,GAAIlD,EAEF,OADuBA,EAAKmD,cA2CXpC,IAAI,SAACqC,EAAQ1C,GAC9B,IAdavB,EAcPkE,EAAC,GAAAC,OAAM,EAAIF,EAAEC,EAAZ,MACDE,EAAC,GAAAD,OAAM,GAAKF,EAAEG,EAAb,MACP,MAAO,CACLzH,GAAI4E,EACJvB,MAlBWA,EAkBGiE,EAAE1D,KAAKb,OAAOM,KAjBzBA,EAAK4B,IAAI,SAAChF,EAAUyH,EAASC,GAApB,MACd,CACEzF,KAAMjC,EAAI+B,MAAM4F,WAChBC,SAAUH,EACVI,OAAQ7H,EAAI+B,MAAM4F,WAAWpE,OAC7BF,YAAarD,EAAIqD,YACjByE,UAAWC,EAAa/H,EAAKyH,EAAIC,OAE/B,MAUF9F,MAAO,CACLoG,UAAS,aAAAT,OAAeD,EAAf,KAAAC,OAAoBC,EAApB,SA7CjB,SAASS,IACP,GAAIhE,EAEF,OADuBA,EAAKmD,cAkDXc,MAAM,GAAGlD,IAAI,SAACqC,EAAQ1C,GACvC,IAAM2C,EAAID,EAAEC,EAAI,EACVa,EAAU,EAAId,EAAE5C,OAAO6C,EACvBE,EAAI,GAAKH,EAAEG,EACXY,EAAU,GAAKf,EAAE5C,OAAO+C,EACxBnE,EAAcgE,EAAE1D,KAAKb,OAAOM,KAAKiF,KAAK,SAACrI,GAAD,OAAcA,EAAIqD,eAAgBgE,EAAE5C,OAAOd,KAAKb,OAAOM,KAAKiF,KAAK,SAACrI,GAAD,OAAcA,EAAIqD,cAC/H,MAAO,CACLtD,GAAI4E,EACJ0C,EAAC,IAAAE,OAAMD,EAAN,KAAAC,OAAWC,EAAX,KAAAD,OAAgBY,EAAhB,KAAAZ,OAA2Ba,GAC5BxG,MAAOyB,EAAcqD,EAASG,WAAWxD,YAAcqD,EAASG,WAAWC,SAtDjF,SAASwB,IACP,GAAGrE,EAED,OADyBA,EAAKnB,SA0DlBkC,IAAI,SAACqC,EAAQ1C,EAAQjF,GACjC,IAAM4H,EAAID,EAAEC,EACNE,EAAI,GAAKH,EAAEG,EACbe,EAAS,EAIb,OAHG7I,EAAEiF,EAAE,KACL4D,EAAS7I,EAAEiF,EAAE,GAAG2C,EAA2B,EAAtBZ,EAASC,cAEzB,CACL5G,GAAI4E,EACJ6D,GAAE,GAAAjB,OAAKD,GACPmB,GAAE,GAAAlB,OAAKC,GACPkB,GAAE,GAAAnB,OAAKgB,GACP3G,MAAO8E,EAASG,WAAWC,SAjEjC,SAASiB,EAAa/H,EAAU4H,EAAexE,GAC7C,MAAO,CACLvB,MAAO6E,EAASC,aAAmD,GAAnC3G,EAAI+B,MAAM4F,WAAWpE,OAAS,GAC9DoF,OAAQjC,EAASE,cACjBU,EAAGM,GAAYlB,EAASC,aAAmD,GAAnC3G,EAAI+B,MAAM4F,WAAWpE,OAAS,KAC1DmD,EAASC,aAAmD,GAAnC3G,EAAI+B,MAAM4F,WAAWpE,OAAS,IAAU,GAAMH,EAAOA,EAAKG,OAAS,GACxGiE,GAAId,EAASE,cAAgB,EAC7BhF,MAAO5B,EAAIqD,YAAcqD,EAASM,WAAW3D,YAAcqD,EAASM,WAAWF,OAsKnF,OACErH,EAAAC,EAAAC,cAAA,WAASyB,UAAU,uBACf3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,oBACb3B,EAAAC,EAAAC,cAAAiJ,EAAA,GACEpH,KAAK,OACLO,MAAOqE,EACPtE,SAjDU,SAAC+G,GACnB,IAAI3E,EACJ,GAAiC,WAA9BlD,EAAMqB,WAAWE,SAAsB,CAExC,GADA2B,EAAU4E,SAASD,EAAE1I,OAAO4B,OAAS,EAAG,IACpCgH,OAAOC,MAAM9E,GACf,OAEF,GAAGA,EAAU,GACX,WAEC,CACH,KAAI2E,EAAE1I,OAAO4B,MAAMkH,WAAW,IAAM,IAAMJ,EAAE1I,OAAO4B,MAAMkH,WAAW,IAAM,KAYxE,OAXA,GAAGJ,EAAE1I,OAAO4B,MAAM8G,EAAE1I,OAAO4B,MAAMwB,OAAO,GAAG0F,WAAW,IAAM,IAAMJ,EAAE1I,OAAO4B,MAAM8G,EAAE1I,OAAO4B,MAAMwB,OAAO,GAAG0F,WAAW,IAAM,IAEzH,YADA5C,EAASwC,EAAE1I,OAAO4B,MAAM8G,EAAE1I,OAAO4B,MAAMwB,OAAO,IAG9C,IAAGwF,OAAOC,MAAMH,EAAE1I,OAAO4B,MAAM8G,EAAE1I,OAAO4B,MAAMwB,OAAO,IAGnD,OAFAW,EAAU2E,EAAE1I,OAAO4B,MAS3BsE,EAASnC,IAwBDtC,MAAO,CAAEC,MAAO,OAElBpC,EAAAC,EAAAC,cAAAuC,EAAA,GAAQV,KAAK,UAAUW,QAvBZ,WACdqE,EAAgB0C,SAAS9C,GAC1B1F,KAGF8F,EAAgBrD,KAAKiD,GACrBK,EAAmBD,GACnBxF,EAAMgB,SAAS,CACbR,KAAM,cACNO,MAAOqE,IAETH,EAAQf,EAAUlE,EAAMqB,WAAWyD,gBAY7B,WAEFrG,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,CACF0B,UAAU,OACVrB,GAAG,SACHuB,UAAW,IAEX7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAWH,UAAU,sBAAsBI,KAAK,OAAOE,MAAO,IAAM1B,IAAI,UACxEP,EAAAC,EAAAC,cAAA,OACIyB,UAAU,MACVQ,MAAO,CACLC,MAAK,SACL8G,OAAM,UAxGhB,WACE,IADmBQ,EACbC,EAAQ,GADKC,EAAAC,EAGArB,KAHA,IAGnB,IAAAoB,EAAAE,MAAAJ,EAAAE,EAAAG,KAAAC,MAA4B,KAAjBC,EAAiBP,EAAApH,MAC1BqH,EAAMjG,KAAK1D,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,OAAOpB,IAAK0J,EAAK3J,GAAIsH,EAAGqC,EAAKrC,EAAGzF,MAAO8H,EAAK9H,UAJtD,MAAA+H,GAAAN,EAAAR,EAAAc,GAAA,QAAAN,EAAAO,IAMnB,OAAOR,EAqGAS,GACC7I,EAAMqB,WAAWyD,sBAAsB/B,EAhIjD,WACE,IADqB+F,EACfV,EAAQ,GADOW,EAAAT,EAEFhB,KAFE,IAErB,IAAAyB,EAAAR,MAAAO,EAAAC,EAAAP,KAAAC,MAA6B,KAAnBO,EAAmBF,EAAA/H,MAC3BqH,EAAMjG,KACJ1D,EAAAC,EAAAC,cAAA,KAAGK,IAAKgK,EAAMjK,IACZN,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQI,GAAG,YAAYkK,YAAY,KAAKC,aAAa,IACrDC,KAAK,IAAIC,KAAK,MAAMC,OAAO,QACzB5K,EAAAC,EAAAC,cAAA,WAAS2K,OAAO,uBAGpB7K,EAAAC,EAAAC,cAAA,QAAM6I,GAAIwB,EAAMxB,GAAIC,GAAIuB,EAAMvB,GAAI8B,GAAIP,EAAMvB,GAAIC,GAAIsB,EAAMtB,GAAI3B,OAAO,OAC7EyD,UAAU,uBAZa,MAAAb,GAAAI,EAAAlB,EAAAc,GAAA,QAAAI,EAAAH,IAiBrB,OADAR,EAAMxE,MACCwE,EA+GoDqB,GAAgB,KAnG7E,WACE,IADkBC,EACZtB,EAAQ,GADIuB,EAAArB,EAGCnC,KAHD,QAAAyD,EAAA,eAGP1H,EAHOwH,EAAA3I,MAIhBqH,EAAMjG,KAAK1D,EAAAC,EAAAC,cAAA,KAAGyB,UAAU,OAAOpB,IAAKkD,EAAKnD,IACtCmD,EAAKE,KAAK4B,IAAI,SAAChF,EAAU6K,GACxB,OACEpL,EAAAC,EAAAC,cAAA,KAAGK,IAAKA,EAAIiC,KACVL,MAAOsB,EAAKtB,OACVnC,EAAAC,EAAAC,cAAA,QAAMkC,MAAO7B,EAAI8H,UAAUjG,MAC3B8G,OAAQ3I,EAAI8H,UAAUa,OACtBrB,EAAGtH,EAAI8H,UAAUR,EACjBE,EAAGxH,EAAI8H,UAAUN,EACjB5F,MAAO5B,EAAI8H,UAAUlG,QACvBnC,EAAAC,EAAAC,cAAA,QACEmL,GAAI9K,EAAI4H,SAAWlB,EAASC,aACzBD,EAASC,aAAa,EAAMzD,EAAKE,KAAKG,OAAU,GAAsB,GAAhBvD,EAAI6H,OAAS,GACtEkD,GAAI,EACJnJ,MAAOsB,EAAK8H,WAEVhL,EAAIiC,YAjBlB,IAAA0I,EAAApB,MAAAmB,EAAAC,EAAAnB,KAAAC,MAA4BmB,IAHV,MAAAjB,GAAAgB,EAAA9B,EAAAc,GAAA,QAAAgB,EAAAf,IA4BlB,OAAOR,EAwEA6B,mBCrRJ,IAAMvI,EAAb,WAII,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAHRC,YAGO,EAAAD,KAFPE,cAEO,EACVF,KAAKC,OAAS,IAAIE,EAClBH,KAAKE,SAAW,GANxB,OAAAJ,OAAAM,EAAA,EAAAN,CAAAD,EAAA,EAAA1C,IAAA,YAAA+B,MAAA,SAScmB,GACNL,KAAKE,SAASI,KAAKD,OAV3BR,EAAA,GAcaM,EAAb,WAGI,SAAAA,IAAeL,OAAAC,EAAA,EAAAD,CAAAE,KAAAG,GAAAH,KAFRO,UAEO,EACVP,KAAKO,KAAO,GAJpB,OAAAT,OAAAM,EAAA,EAAAN,CAAAK,EAAA,EAAAhD,IAAA,UAAA+B,MAAA,SAOYA,GAA6B,IAAnBsB,EAAmBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACjCT,KAAKO,KAAKD,KAAK,CAACpB,QAAOsB,oBAR/BL,EAAA,GCdaS,EAAb,WAKI,SAAAA,EAAYC,GAAiBf,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,GAAAZ,KAJtBc,UAIqB,EAAAd,KAHrBE,cAGqB,EAAAF,KAFrBa,YAEqB,EACxBb,KAAKc,KAAO,GACZd,KAAKE,SAAW,GAChBF,KAAKa,OAASA,EARtB,OAAAf,OAAAM,EAAA,EAAAN,CAAAc,EAAA,EAAAzD,IAAA,cAAA+B,MAAA,SAWuBA,GAEf,IADA,IAAI8B,EAAM,EACHhB,KAAKc,KAAKE,GAAO9B,GAAS8B,EAAMhB,KAAKc,KAAKJ,QAC7CM,IAEJhB,KAAKc,KAAKG,OAAOD,EAAK,EAAG9B,KAhBjC,CAAA/B,IAAA,eAAA+B,MAAA,SAmBwBmB,EAAeW,GAC/BhB,KAAKE,SAASe,OAAOD,EAAK,EAAGX,OApBrCO,EAAA,GCGayH,EAAb,WAII,SAAAA,EAAYlH,GAAerB,OAAAC,EAAA,EAAAD,CAAAE,KAAAqI,GAAArI,KAHnBoB,UAGkB,EAAApB,KAFlBmB,WAEkB,EACtBnB,KAAKmB,MAAQA,EACbnB,KAAKoB,KAAO,IAAIR,GAAQ,GANhC,OAAAd,OAAAM,EAAA,EAAAN,CAAAuI,EAAA,EAAAlL,IAAA,SAAA+B,MAAA,SASkBA,GACV,IAAImC,EAAUrB,KAAKoB,KAEnB,GADApB,KAAKsB,cAAcD,EAAQnC,GACxBmC,EAAQP,KAAKJ,SAAWV,KAAKmB,MAAO,CACnC,IAAMI,EAAU,IAAIX,GAAQ,GAC5BZ,KAAKoB,KAAOG,EACZA,EAAQC,aAAaH,EAAS,GAC9BrB,KAAKyB,MAAMJ,EAASE,EAAS,MAhBzC,CAAApE,IAAA,gBAAA+B,MAAA,SAoB0BmB,EAAenB,GACjC,GAAImB,EAAKQ,OAULR,EAAKqB,YAAYxC,OAVL,CAEZ,IADA,IAAI8B,EAAMX,EAAKS,KAAKJ,OACdM,EAAM,GAAKX,EAAKS,KAAKE,EAAI,GAAK9B,GAChC8B,IAEJhB,KAAKsB,cAAcjB,EAAKH,SAASc,GAAM9B,GACnCmB,EAAKH,SAASc,GAAKF,KAAKJ,SAAWV,KAAKmB,OACxCnB,KAAKyB,MAAMpB,EAAKH,SAASc,GAAMX,EAAMW,EAAM,MA5B3D,CAAA7D,IAAA,QAAA+B,MAAA,SAmCkByC,EAAgBC,EAAiBZ,GAE3C,IADA,IAAIa,EAAW,IAAIjB,EAAQe,EAAMd,QACzBiB,EAAI,EAAGA,GAAK9B,KAAKmB,MAAQ,GAAK,EAAIW,IACtCD,EAASH,YAAYC,EAAMb,KAAKiB,OAEpC,IAAIJ,EAAMd,OACN,IAAK,IAAIiB,EAAI,EAAGA,EAAIwG,KAAKC,MAAMvI,KAAKmB,MAAQ,GAAK,GAAK,EAAGW,IACrDD,EAASL,aAAaG,EAAMzB,SAASe,QAAQjB,KAAKmB,MAAQ,GAAK,EAAI,EAAG,GAAG,GAAIW,GAGrFF,EAAOJ,aAAaK,EAAUb,GAC9BY,EAAOF,YAAYC,EAAMb,KAAKiB,OAC9BH,EAAOf,QAAS,IA/CxB,CAAA1D,IAAA,UAAA+B,MAAA,WAmDQ,OAAOc,KAAKoB,OAnDpB,CAAAjE,IAAA,cAAA+B,MAAA,SAsDuBmB,GAAe,IAAA2B,EAAAhC,KACxBiC,EAAY,IAAIpC,EACtBoC,EAAUhC,OAAS,IAAIE,EACvB,IAAI,IAAI2B,EAAE,EAAGA,EAAEzB,EAAKS,KAAKJ,OAAQoB,IAC7BG,EAAUhC,OAAOiC,QAAQ7B,EAAKS,KAAKgB,IAGvC,OADAG,EAAU/B,SAAWG,EAAKH,SAASiC,IAAI,SAAC9B,GAAD,OAAU2B,EAAKI,YAAY/B,KAC3D4B,MA7DfoG,EAAA,GCIA,IAAMG,EAAWC,YAAgB,CAC7BhJ,SCRW,WAA2C,IAAzBiJ,EAAyBjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,GAAIkI,EAAalI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQgI,EAAOhK,MACb,IAAK,gBACH,OAAOgK,EAAOvJ,KAChB,QACE,OAAOsJ,IDIXhJ,SETW,WAA2C,IAAzBgJ,EAAyBjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,GAAIkI,EAAalI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQgI,EAAOhK,MACb,IAAK,gBACH,OAAOgK,EAAOvJ,KAChB,QACE,OAAOsJ,IFKX/I,UGVW,WAA4C,IAAzB+I,EAAyBjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,GAAIkI,EAAalI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvD,OAAQgI,EAAOhK,MACb,IAAK,iBACH,OAAOgK,EAAOvJ,KAChB,QACE,OAAOsJ,IHMXE,SIXW,WAA8C,IAA5BF,EAA4BjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAbkI,EAAalI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAQgI,EAAOhK,MACb,IAAK,gBACH,OAAOgK,EAAOvJ,KAChB,QACE,OAAOsJ,IJOXzF,WKPW,WAAsD,IAAlCyF,EAAkCjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,KAAMkI,EAAalI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjE,OAAQgI,EAAOhK,MACX,IAAK,sBACD,GAAuB,WAApBgK,EAAOjJ,SACN,OAAO,IAAI2I,EAAcpC,SAAS0C,EAAOhJ,YAE7C,GAAuB,WAApBgJ,EAAOjJ,SACN,OAAO,IAAI2I,EAAcpC,SAAS0C,EAAOhJ,YAEjD,IAAK,0BACD,GAAuB,WAApBgJ,EAAOjJ,SACN,OAAO,IAAIwB,EAAkB+E,SAAS0C,EAAOhJ,YAEjD,GAAuB,WAApBgJ,EAAOjJ,SACN,OAAO,IAAIwB,EAAkB+E,SAAS0C,EAAOhJ,YAErD,IAAK,cAED,OADA+I,EAAOG,OAAOF,EAAOzJ,OACdwJ,EACX,QACI,OAAOA,MLRJvK,EAFD2K,YAAYN,GMLX,SAASO,IAAM,IAAAjG,EAEOC,IAAMC,UAAS,GAFtBE,EAAApD,OAAAqD,EAAA,EAAArD,CAAAgD,EAAA,GAEnB8F,EAFmB1F,EAAA,GAET8F,EAFS9F,EAAA,GAU1B,OANA+F,oBAAU,WACN9K,EAAM+K,UAAU,YACkB,IAA9B/K,EAAMqB,WAAWoJ,SAAqBI,GAAY,GAASA,GAAY,MAE5E,CAACJ,IAGAhM,EAAAC,EAAAC,cAACqM,EAAA,EAAD,CAAUhL,MAAOA,GACbvB,EAAAC,EAAAC,cAACJ,EAAD,OACc,IAAbkM,EAAqBhM,EAAAC,EAAAC,cAACoB,EAAD,MAAoBtB,EAAAC,EAAAC,cAAC+F,EAAD,OCXlCuG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9M,EAAAC,EAAAC,cAACiM,EAAD,MAASY,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0e29b8d3.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu, Row, Col } from 'antd';\n\nexport default function Header() {\n\n    const menu = [\n      <Menu mode=\"horizontal\" defaultSelectedKeys={['github']} id=\"nav\" key=\"nav\">\n        <Menu.Item key=\"github\">\n          <a href=\"https://github.com/herlessalvarado/btree-visualization\" target=\"_blank\">\n            Github\n          </a>\n        </Menu.Item>\n      </Menu>,\n    ];\n\n    return (\n      <header id=\"header\">\n        <Row>\n          <Col lg={4} md={5} sm={24} xs={24}>\n            <a id=\"logo\">\n              <span>BTree Visualizer</span>\n            </a>\n          </Col>\n          <Col lg={20} md={19} sm={0} xs={0}>\n            {menu}\n          </Col>\n        </Row>\n      </header>\n    );\n  }\n","import React from 'react';\nimport ScrollElement from 'rc-scroll-anim/lib/ScrollElement';\nimport { Icon, Select, Button, notification } from 'antd';\nimport QueueAnim from 'rc-queue-anim';\nimport { useStore } from 'react-redux';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification',\n    description:\n      'Please fill all the selects.',\n  });\n};\n\nexport default function Banner() {\n\n    let store = useStore();\n    \n    const { Option } = Select;\n\n    function handleTreeType (value : any) {\n        store.dispatch({\n            type: 'SET_TREE_TYPE',\n            text: value,\n        });\n    }\n\n    function handleDataType (value : any) {\n        store.dispatch({\n            type: 'SET_DATA_TYPE',\n            text: value,\n        });\n    }\n\n    function handleMaxDegree (value : any) {\n        store.dispatch({\n            type: 'SET_MAX_DEGREE',\n            text: value,\n        });\n    }\n\n    function handleChangeView() {\n      let check = store.getState()\n      if(check.treeType !== '' && check.dataType !== '' && check.maxDegree !== ''){\n        if(check.treeType === 'btree'){\n          store.dispatch({\n            type: 'CREATE_BTREE_OBJECT',\n            dataType: check.dataType,\n            maxDegree: check.maxDegree,\n          });\n        }\n        if(check.treeType === 'bplustree'){\n          store.dispatch({\n            type: 'CREATE_BPLUSTREE_OBJECT',\n            dataType: check.dataType,\n            maxDegree: check.maxDegree,\n          });\n        }\n        store.dispatch({\n          type: 'SET_VIEW_TREE',\n          text: true,\n        });\n      }else{\n        openNotification();\n      }\n    }\n\n  return (\n    <section className=\"page banner-wrapper\">\n      <ScrollElement\n        className=\"page\"\n        id=\"banner\"\n        playScale={0.9}\n      >\n        <QueueAnim className=\"banner-text-wrapper\" type={['right', 'left']}\n          ease={['easeOutQuart', 'easeInOutQuart']} delay={500} key=\"banner\">\n            <h2 key=\"1\">SELECT YOUR <p>BTREE</p></h2>\n            <Select\n                key=\"2\"\n                showSearch\n                style={{ width: 300 }}\n                onChange={handleTreeType}\n            >\n                <Option value=\"btree\">B Tree</Option>\n                <Option value=\"bplustree\">B+ Tree</Option>\n            </Select>\n            <h2 key=\"3\">SELECT YOUR <p>DATA TYPE</p></h2>\n            <Select\n                key=\"4\"\n                showSearch\n                style={{ width: 300 }}\n                onChange={handleDataType}\n            >\n                <Option value=\"number\">Number</Option>\n                <Option value=\"string\">String</Option>\n            </Select>\n            <h2 key=\"5\">SELECT YOUR <p>MAX DEGREE</p></h2>\n            <Select\n                key=\"6\"\n                showSearch\n                style={{ width: 300 }}\n                onChange={handleMaxDegree}\n            >\n                <Option value=\"3\">3</Option>\n                <Option value=\"4\">4</Option>\n                <Option value=\"5\">5</Option>\n                <Option value=\"6\">6</Option>\n            </Select>\n            <h2 key=\"7\">SEE THE MAGIC</h2>\n            <Button key=\"8\" className=\"start-button clearfix\" type=\"primary\" onClick={handleChangeView}>Go</Button>\n        </QueueAnim>\n        <Icon type=\"down\" className=\"down\" />\n      </ScrollElement>\n    </section>\n  );\n}\n","export class NodeHierarchy<T> {\n    public leaves : LeafHierarchy<T>;\n    public children : NodeHierarchy<T>[];\n    \n    constructor() {\n        this.leaves = new LeafHierarchy();\n        this.children = [];\n    }\n\n    pushChild(node: NodeHierarchy<T>){\n        this.children.push(node);\n    }\n}\n\nexport class LeafHierarchy<T> {\n    public keys : Object[];\n\n    constructor() {\n        this.keys = [];\n    }\n\n    pushKey(value: T, highlighted=false) {\n        this.keys.push({value, highlighted});\n    }\n}","export class Node<T>{\n    public data: Array<T>;\n    public children: Array<Node<T>>;\n    public right: Node<T> | null;\n    public isLeaf: boolean;\n\n    constructor(isLeaf: boolean){\n        this.data = [];\n        this.children = [];\n        this.right = null;\n        this.isLeaf = isLeaf;\n    }\n\n    public insert_data(value: T) : void { \n        let pos = 0;\n        while (this.data[pos] < value && pos < this.data.length) {\n            pos++;\n        }\n        this.data.splice(pos, 0, value);\n    };\n\n    public insert_child(node: Node<T>, pos: number) : void {\n        this.children.splice(pos, 0, node);\n    }\n}","import { LeafHierarchy, NodeHierarchy } from './Visualizator';\nimport { Node } from './Node';\n\nexport class BPlusTree<T>{\n    private root: Node<T>;\n    private order: number;\n\n    constructor(order: number){\n        this.order = order;\n        this.root = new Node<T>(true);\n    }\n\n    public insert(value: T) : void {\n        let current = this.root;\n        this.insertNotFull(current,value);\n        if(current.data.length === this.order) {\n            const newRoot = new Node<T>(false);\n            this.root = newRoot;\n            newRoot.insert_child(current, 0);\n            this.split(current, newRoot, 1);\n        }\n    }\n\n    private insertNotFull(node: Node<T>, value: T) : void {\n        if(!node.isLeaf){\n            let pos = node.data.length;\n            while(pos > 0 && node.data[pos-1] > value){\n                pos--;\n            }\n            this.insertNotFull(node.children[pos], value);\n            if (node.children[pos].data.length === this.order) {\n                this.split(node.children[pos], node, pos + 1);\n            }\n        }else{\n            node.insert_data(value);\n        }\n    }\n\n    private split(child: Node<T>, parent: Node<T>, pos: number) : void {\n        let newChild = new Node<T>(child.isLeaf);\n        for(let i = 0 ; i < this.order/2 ; i++){\n            newChild.insert_data(child.data.pop()!);\n        }\n        if(!child.isLeaf){\n            for (let i = 0 ; i < this.order/2 ; i++) {\n                newChild.insert_child(child.children.splice(this.order/2 + 1, 1)[0], i);\n            }\n        }\n        parent.insert_child(newChild, pos);\n        parent.insert_data(newChild.data[0]);\n        if(!newChild.isLeaf) newChild.data.splice(0,1);\n        parent.isLeaf = false;\n        if(child.isLeaf) child.right = newChild;\n    }\n\n    public getRoot() : Node<T>{\n        return this.root;\n    }\n\n    public toHierarchy(node: Node<T>) {\n        const hierarchy = new NodeHierarchy<T>();\n        hierarchy.leaves = new LeafHierarchy<T>();\n        for(let i=0; i<node.data.length; i++){\n            hierarchy.leaves.pushKey(node.data[i]);\n        }\n        hierarchy.children = node.children.map((node) => this.toHierarchy(node));\n        return hierarchy;\n    }\n}","import React from 'react';\nimport * as d3 from 'd3';\nimport ScrollElement from 'rc-scroll-anim/lib/ScrollElement';\nimport QueueAnim from 'rc-queue-anim';\nimport { Input, Button, notification } from 'antd';\nimport { BPlusTree } from '../structures/BPlusTree/BPlusTree';\nimport { useStore } from 'react-redux';\n\nconst openNotification = () => {\n  notification.open({\n    message: 'Notification',\n    description:\n      'The element is already inserted',\n  });\n};\n\nfunction getD3Tree (btree: any) {\n  const tree = d3.tree().size([1000, 50 - 200]).separation(() => (38 * 2));\n  let BTREE = btree.toHierarchy(btree.getRoot());\n  return tree(d3.hierarchy(BTREE));\n}\n\nexport default function TreeVisualization() {\n\n  let store = useStore();\n\n  const [root, setRoot] = React.useState<any>(getD3Tree(store.getState().treeObject));\n\n  const [input, setInput] = React.useState<any>();\n\n  const [alreadyInserted, setAlreadyInserted] = React.useState<any>([]);\n  \n  const settings = {\n    keyCellWidth: 38,\n    keyCellHeight: 28,\n    linkStyles: {\n      plain: {\n        stroke: 'black',\n      },\n      highlighted: {\n        stroke: 'red',\n      },\n    },\n    rectStyles: {\n      plain: {\n        fill: 'white',\n        stroke: 'black',\n        strokeWidth: 2,\n      },\n      highlighted: {\n        fill: 'lightblue',\n        stroke: 'red',\n        strokeWidth: 2,\n      },\n    },\n  };\n\n  function nodes() {\n    if (root) {\n      const nodes = getNodes(root.descendants());\n      return nodes;\n    }\n  };\n\n  function links() {\n    if (root) {\n      const links = getLinks(root.descendants());\n      return links;\n    }\n  };\n\n  function arrows() {\n    if(root) {\n      const arrows = getArrows(root.leaves());\n      return arrows;\n    }\n  }\n\n  function getSVGParams(key: any, position: any, keys: any) {\n    return {\n      width: settings.keyCellWidth + (key.value.toString().length - 1) * 3,\n      height: settings.keyCellHeight,\n      x: position * (settings.keyCellWidth + (key.value.toString().length - 1) * 3)\n              - ((settings.keyCellWidth + (key.value.toString().length - 1) * 3) / 2) * (keys ? keys.length : 2),\n      y: -settings.keyCellHeight / 2,\n      style: key.highlighted ? settings.rectStyles.highlighted : settings.rectStyles.plain,\n    };\n  };\n\n  function getKeys(keys: any) {\n    return keys.map((key: any, ii: any, keyArray: any) => (\n      {\n        text: key.value.toString(),\n        position: ii,\n        digits: key.value.toString().length,\n        highlighted: key.highlighted,\n        svgParams: getSVGParams(key, ii, keyArray),\n      }\n    )) || null;\n  };\n\n  function getNodes(descendants: any) {\n    return descendants.map((d: any, i: any) => {\n      const x = `${0 + d.x}px`;\n      const y = `${20 - d.y}px`;\n      return {\n        id: i,\n        keys: getKeys(d.data.leaves.keys),\n        style: {\n          transform: `translate(${x},${y})`,\n        },\n      };\n    });\n  };\n  \n  function getLinks(descendants: any) {\n    return descendants.slice(1).map((d: any, i: any) => {\n      const x = d.x + 0;\n      const parentx = 0 + d.parent.x;\n      const y = 20 - d.y;\n      const parenty = 20 - d.parent.y;\n      const highlighted = d.data.leaves.keys.some((key: any) => key.highlighted) && d.parent.data.leaves.keys.some((key: any) => key.highlighted);\n      return {\n        id: i,\n        d: `M${x},${y}L${parentx},${parenty}`,\n        style: highlighted ? settings.linkStyles.highlighted : settings.linkStyles.plain,\n      };\n    });\n  };\n\n  function getArrows(leaves: any) {\n    return leaves.map((d: any, i: any, a: any) => {\n      const x = d.x;\n      const y = 20 - d.y;\n      let xright = 0;\n      if(a[i+1]){\n        xright = a[i+1].x - (settings.keyCellWidth*2);\n      }\n      return {\n        id: i,\n        x1: `${x}`,\n        y1: `${y}`,\n        x2: `${xright}`,\n        style: settings.linkStyles.plain,\n      };\n    })\n  }\n\n  function printArrows() {\n    const items = [];\n    for(const arrow of arrows()) {\n      items.push(\n        <g key={arrow.id}>\n          <defs>\n            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \n            refX=\"0\" refY=\"3.5\" orient=\"auto\">\n              <polygon points=\"0 0, 10 3.5, 0 7\" />\n            </marker>\n          </defs>\n          <line x1={arrow.x1} y1={arrow.y1} y2={arrow.y1} x2={arrow.x2} stroke=\"#000\" \n  markerEnd=\"url(#arrowhead)\" />\n        </g>\n      )\n    }\n    items.pop();\n    return items;\n  }\n\n  function printLinks(){\n    const items = [];\n\n    for (const link of links()) {\n      items.push(<path className=\"link\" key={link.id} d={link.d} style={link.style}></path>)\n    }\n    return items\n  }\n\n  function printNode(){\n    const items = [];\n\n    for (const node of nodes()) {\n      items.push(<g className=\"node\" key={node.id}>\n        {node.keys.map((key: any, index: any) => {\n          return(\n            <g key={key.text}\n              style={node.style}>\n                <rect width={key.svgParams.width}\n                height={key.svgParams.height}\n                x={key.svgParams.x}\n                y={key.svgParams.y}\n                style={key.svgParams.style}></rect>\n              <text\n                dx={key.position * settings.keyCellWidth -\n                  (settings.keyCellWidth/2) * (node.keys.length) + 10 - (key.digits - 2)*4}\n                dy={4}\n                style={node.textStyle}\n              >\n                { key.text }\n              </text>\n            </g>\n          )\n        }\n      )}\n      </g>)\n    }\n    return items\n  }\n\n  const handleInput = (e: any) => {\n    let current;\n    if(store.getState().dataType === 'number'){\n      current = parseInt(e.target.value || 0, 10);\n      if (Number.isNaN(current)) {\n        return;\n      }\n      if(current > 99) {\n        return;\n      }\n    }else{\n      if((e.target.value.charCodeAt(0) >= 97 && e.target.value.charCodeAt(0) <= 122)){\n        if(e.target.value[e.target.value.length-1].charCodeAt(0) >= 97 && e.target.value[e.target.value.length-1].charCodeAt(0) <= 122){\n          setInput(e.target.value[e.target.value.length-1]);\n          return;\n        }else{\n          if(Number.isNaN(e.target.value[e.target.value.length-1])){\n            current = e.target.value;\n          }else{\n            return;\n          }\n        }\n      }else{\n        return;\n      }\n    }\n    setInput(current);\n  }\n\n  const insertTree = () => {\n    if(alreadyInserted.includes(input)){\n      openNotification();\n      return;\n    }\n    alreadyInserted.push(input);\n    setAlreadyInserted(alreadyInserted);\n    store.dispatch({\n      type: 'INSERT_TREE',\n      value: input,\n    });\n    setRoot(getD3Tree(store.getState().treeObject));\n  }\n  \n  return (\n    <section className=\"page banner-wrapper\">\n        <div className=\"insert-container\">\n          <Input\n            type=\"text\"\n            value={input}\n            onChange={handleInput}\n            style={{ width: 100 }}\n          />\n          <Button type=\"primary\" onClick={insertTree}>Insert</Button>\n        </div>\n        <ScrollElement\n      className=\"page\"\n      id=\"banner\"\n      playScale={0.9}\n    >\n      <QueueAnim className=\"banner-text-wrapper\" type=\"left\" delay={1000} key=\"banner\">\n      <svg\n          className=\"svg\"\n          style={{\n            width: `1000px`,\n            height: `600px`\n          }}\n        >\n          {printLinks()}\n          { store.getState().treeObject instanceof BPlusTree ? printArrows() : null}\n          {printNode()}\n      </svg>\n      </QueueAnim>\n      </ScrollElement>\n    </section>\n  );\n}\n","export class NodeHierarchy<T> {\n    public leaves : LeafHierarchy<T>;\n    public children : NodeHierarchy<T>[];\n    \n    constructor() {\n        this.leaves = new LeafHierarchy();\n        this.children = [];\n    }\n\n    pushChild(node: NodeHierarchy<T>){\n        this.children.push(node);\n    }\n}\n\nexport class LeafHierarchy<T> {\n    public keys : Object[];\n\n    constructor() {\n        this.keys = [];\n    }\n\n    pushKey(value: T, highlighted=false) {\n        this.keys.push({value, highlighted});\n    }\n}","export class Node<T>{\n    public data: Array<T>;\n    public children: Array<Node<T>>;\n    public isLeaf: boolean;\n\n    constructor(isLeaf: boolean){\n        this.data = [];\n        this.children = [];\n        this.isLeaf = isLeaf;\n    }\n\n    public insert_data(value: T) : void { \n        let pos = 0;\n        while (this.data[pos] < value && pos < this.data.length) {\n            pos++;\n        }\n        this.data.splice(pos, 0, value);\n    };\n\n    public insert_child(node: Node<T>, pos: number) : void {\n        this.children.splice(pos, 0, node);\n    }\n}","import { LeafHierarchy, NodeHierarchy } from './Visualizator';\nimport { Node } from './Node';\n\nexport class BTree<T>{\n    private root: Node<T>;\n    private order: number;\n\n    constructor(order: number){\n        this.order = order;\n        this.root = new Node<T>(true);\n    }\n\n    public insert(value: T) : void {\n        let current = this.root;\n        this.insertNotFull(current,value);\n        if(current.data.length === this.order) {\n            const newRoot = new Node<T>(false);\n            this.root = newRoot;\n            newRoot.insert_child(current, 0);\n            this.split(current, newRoot, 1);\n        }\n    }\n\n    private insertNotFull(node: Node<T>, value: T) : void {\n        if(!node.isLeaf){\n            let pos = node.data.length;\n            while(pos > 0 && node.data[pos-1] > value){\n                pos--;\n            }\n            this.insertNotFull(node.children[pos], value);\n            if (node.children[pos].data.length === this.order) {\n                this.split(node.children[pos], node, pos + 1);\n            }\n        }else{\n            node.insert_data(value);\n        }\n    }\n\n    private split(child: Node<T>, parent: Node<T>, pos: number) : void {\n        let newChild = new Node<T>(child.isLeaf);\n        for(let i = 0; i < (this.order - 1) / 2 ; i++){\n            newChild.insert_data(child.data.pop()!);\n        }\n        if(!child.isLeaf){\n            for (let i = 0; i < Math.ceil((this.order - 1) / 2) + 1; i++) {\n                newChild.insert_child(child.children.splice((this.order - 1) / 2 + 1, 1)[0], i);\n            }\n        }\n        parent.insert_child(newChild, pos);\n        parent.insert_data(child.data.pop()!);\n        parent.isLeaf = false;\n    }\n\n    public getRoot() : Node<T>{\n        return this.root;\n    }\n\n    public toHierarchy(node: Node<T>) {\n        const hierarchy = new NodeHierarchy<T>();\n        hierarchy.leaves = new LeafHierarchy<T>();\n        for(let i=0; i<node.data.length; i++){\n            hierarchy.leaves.pushKey(node.data[i]);\n        }\n        hierarchy.children = node.children.map((node) => this.toHierarchy(node));\n        return hierarchy;\n    }\n}","import { createStore, combineReducers} from 'redux';\nimport treeTypeReducer from './reducers/treeType';\nimport dataTypeReducer from './reducers/dataType';\nimport maxDegreeReducer from './reducers/maxDegree';\nimport viewTreeReducer from './reducers/viewTree';\nimport treeObjectReducer from './reducers/treeObject';\n\nconst reducers = combineReducers({\n    treeType: treeTypeReducer,\n    dataType: dataTypeReducer,\n    maxDegree: maxDegreeReducer,\n    viewTree: viewTreeReducer,\n    treeObject: treeObjectReducer,\n});\n\nconst store = createStore(reducers);\n\nexport default store;","export default function treeType(state = '', action: any) {\n    switch (action.type) {\n      case 'SET_TREE_TYPE':\n        return action.text\n      default:\n        return state\n    }\n  }","export default function dataType(state = '', action: any) {\n    switch (action.type) {\n      case 'SET_DATA_TYPE':\n        return action.text\n      default:\n        return state\n    }\n  }","export default function maxDegree(state = '', action: any) {\n    switch (action.type) {\n      case 'SET_MAX_DEGREE':\n        return action.text\n      default:\n        return state\n    }\n  }","export default function viewTree(state = false, action: any) {\n    switch (action.type) {\n      case 'SET_VIEW_TREE':\n        return action.text\n      default:\n        return state\n    }\n  }","import { BPlusTree } from '../../structures/BPlusTree/BPlusTree';\nimport { BTree } from '../../structures/BTree/BTree';\n\ntype alias = BTree<number | string> | BPlusTree<number | string> | null\n\nexport default function treeObject(state: alias = null, action: any) {\n    switch (action.type) {\n        case 'CREATE_BTREE_OBJECT':\n            if(action.dataType === 'number'){\n                return new BTree<number>(parseInt(action.maxDegree));\n            }\n            if(action.dataType === 'string'){\n                return new BTree<string>(parseInt(action.maxDegree));\n            }\n        case 'CREATE_BPLUSTREE_OBJECT':\n            if(action.dataType === 'number'){\n                return new BPlusTree<number>(parseInt(action.maxDegree));\n            }\n            if(action.dataType === 'string'){\n                return new BPlusTree<string>(parseInt(action.maxDegree));\n            }\n        case 'INSERT_TREE':\n            state!.insert(action.value);\n            return state;\n        default:\n            return state\n    }\n  }","import React, { useEffect } from 'react';\nimport './assets/header.less';\nimport './assets/banner.less';\nimport './assets/tree.less';\nimport Header from './components/Header';\nimport Banner from './components/Banner';\nimport TreeVisualization from './components/TreeVisualization';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nexport default function App() {\n\n    const [viewTree, setViewTree ] = React.useState(false);\n\n    useEffect(() => {\n        store.subscribe(() => {\n            store.getState().viewTree === false ? setViewTree(false) : setViewTree(true)\n        })\n    }, [viewTree])\n\n    return (\n        <Provider store={store}>\n            <Header></Header>\n            {viewTree === false ? <Banner></Banner> : <TreeVisualization></TreeVisualization>}\n        </Provider>\n    )\n  }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}